[ORM (Object Relational Mapping)]
- 객체관계매핑
- 정의 : 객체 지향 프로그램에서 사용하는 객체와 관계형 DB 에서 사용하는 테이블을 매핑하는 기술
- 사용처 : 자바 / 파이썬 등

[Hibernate]
- 정의 : 자바에서 ORM 을 구현한 구현체 (프레임워크)
- 목적 : 자바 개발자가 SQL 없이 DB 테이블을 다루기 위함
    1) 빠른 개발 -> SQL 쿼리를 자동으로 생성하므로 개발자가 직접 SQL 을 작성하지 않아도 됨
    2) 자동 타입변환 지원
    3) 간결한 코드 제공
    등등~~~

[JPA (Java Persistence(영속성) Api)]
- 정의 : ORM 기술의 구현체를 조작하는 인터페이스 프레임워크
    1) 자바에서 ORM 을 사용할 때 사용하는 표준 API
    2) 자바에서 ORM 을 어떻게 처리할 지 정의하나 라이브러리(인터페이스 / 어노테이션 / 클래스)

[JPA 설치]
1. build.gradle 에 JPA 라이브러리 설치
    -> implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
2. application.properties 에서 JPA 설정 (JDBC 는 별도 설정해야함)
    <JPA DDL 자동 처리 설정>
        1) spring.jpa.hibernate.ddl-auto = create
            -> 서버가 실행될 때마다 기존 테이블 삭제 후 새로운 테이블 생성 [개발단계]
        2) spring.jpa.hibernate.ddl-auto = update
            -> 서버가 실행될 때마다 기존 테이블 유지 / 변경, 추가 상황이 잇을 때만 수정 생성 [배포단계]
        3) spring.jpa.hibernate.ddl-auto = none ※ 기본값 ※
            -> 개발자 직접 DDL 관리
        3) spring.jpa.hibernate.ddl-auto = create-drop
            -> 서버가 종료될 때마다 테이블 삭제 [개발단계]
        3) spring.jpa.hibernate.ddl-auto = validate
            -> 서버가 실행 될 때마다 엔티티 일치 여부 검사 (값 변경 X / 단순 검사)
    <콘솔에서 JPA 가 자동으로 처리한 SQL 확인 설정>
        1) spring.jpa.show-sql = true
            -> 콘솔에 JPA 가 처리한 SQL 출력 설정
        2) spring.jpa.properties.hibernate.format_sql = true
            -> 콘솔에 SQL 형식으로 출력 설정
        3) logging.level.org.hibernate.SQL = DEBUG
            -> 콘솔에 JPA 가 처리한 디버그 출력
        4)  logging.level.org.hibernate.orm.jdbc.bind = TRACE
            -> 콘솔에 JPA 가 처리한 매개변수 출력

[JPA]
1. entity : DB 테이블과 매핑된 객체(인스턴스) ★ 엔티티 : 개체 ★
    <클래스 예] 학생클래스>     <-영속성 기반 매핑->  <DB 의 테이블 예] 학생테이블>
    <인스턴스 예] new 학생(1)> <-영속성 기반 매핑->  <해당 테이블의 레코드 예] insert into 학생 value(1)>

[JPA 주요 어노테이션]
1. @Entity : 해당 클래스를 DB 테이블과 매핑 (해당 클래스는 영속성 컨텍스트에 저장됨)
2. @Table(name = "테이블명") : 테이블명 정의 (생략 시 자바 클래스 명으로 정의됨)
3. @Id : entity 기본키(primary key) 를 지정
    -> 모든 엔티티 / 테이블은 한 개 이상의 PK 를 가져야함 (없으면 실행 불가)
4. @GeneratedValue(strategy = GenerationType.IDENTITY) : 해당 멤버변수에 auto_increment 지원
    ★ MySQL 만 지원 Oracle 지원 X ★
    ★ @Id 어노테이션을 통해 PK 키로 지정된 멤버변수에만 사용 가능 ★
5. @Column : 엔티티의 속성 매핑
    1) nullable = true/false : null 제약조건 (true : 기본값 / false : not null)
    2) unique = true/false : unique 제약조건 (true : unique / false : 기본값)
    3) columnDefinition = "DB 타입" : 해당 멤버변수에 직접 타입 지정
    4) name = "이름" : 필드명 지정 (생략 시 자바 멤버변수명 적용)
    5) length = 길이 : 길이가 존재하는 필드의 길이 지정
    6) insertable = true/false : insert 적용 필드 여부 지정 (true : 기본값 / false : insert 불가)
    7) updatable = true/false : update 적용 필드 여부 지정 (true : 기본값 / false : update 불가)


[JPA Repository]
<사용법>
1. 인터페이스 생성
2. 해당 인터페이스 위에 @Repository 어노테이션을 통해 bean 등록
3. 해당 인터페이스에 JpaRepository 상속받기
    -> public interface 인터페이슴여 extends JpaRepository<조작할엔티티명, 해당엔티티의 ID타입>{ }
    -> JpaRepository
        1) 기본적인 CRUD(insert/select/update/delete) 제공
        2) 추가적인 쿼리 작성 시 추상메소드를 통해 구현

[CRUD 메소드]
1. .save(저장할 엔티티객체) : 존재하지 않는 PK 면 insert / 존재하는 PK면 update 됨
2. .findAll() : 모든 엔티티를 select (전체조회) ★ 반환타입은 List<> 타입으로 반환됨 ★
3. .findById(Pk키) : PK 에 해당하는 엔티티 반환 (존재하지 않을 시 null 반환) ★ 반환타입은 Optional<> 타입으로 반환됨 ★
    -> 일반적인 사용처 : 수정 시 존재하는 ID 를 조회한 후 수정하기 위해 .findById() 메소드 사용
    -> 사용 흐름
        1) Pk 키에 해당하는 엔티티 찾기
            Optional<엔티티클래스> 변수명 = 인터페이스명.findById(PK키);
        2) 엔티티 존재여부 확인
            if(Optional객체명.isPresent())
        3) 존재 시 영속된 엔티티 꺼내기
            엔티티클래스명 변수명 = Optional객체명.get();
        4) Setter 을 통해 수정
            영속된엔티티변수명.setXXX();
4. .deleteAll() : 엔티티 전체 삭제
5. .deleteById(삭제할 PK 키) : PK 에 해당하는 엔티티 삭제 ★ 반환타입 void (반환이 없음) ★
6. .count() : 레코드 엔티티 전체 개수 반환 ★ 반환타입 long ★
7. .existsById(PK키) : PK 에 해당하는 엔티티 존재여부 boolean 타입으로 반환

※ Optional 클래스 : null 에 관련된 메소드를 제공하는 클래스(nullPointException 방지를 위해 사용) ※
-> 주요 메소드
    1) .isPresent() : null 이면 false / 존재 시 true 반환
    2) .get() : 객체 반환
    3) .orElse(null 일 때 값) : 객체 반환 시 null 이면 지정된 값 반환
    4) .orElseThrow(예외객체) : 객체 반환 시 null 이면 예외 발생

[JPA Auditing]
- 정의 : 엔티티의 생성/수정 변화를 기록하는 걸 자동으로 감시하는 기능
- 목적 : SQL Insert/Update 를 감시하여 기록함
- 사용처 BaseTime 상속 클래스 (엔티티들의 생성 / 수정 필드)
- 사용법
    1) AppStart 클래스 위에 @EnableJpaAuditing 어노테이션 주입을 통해 변환 감지 기능 활성화
    2) BaseTime 클래스 엔티티 생성
        <BaseTime 엔티티에 어노테이션 주입>
        - @MappedSuperClass 주입 : 해당 클래스를 일반 클래스 엔티티가 아닌 슈퍼 클래스 엔티티(공통로직)로 사용
        - @EntityListeners(AuditingEntityListener.class) 주입 : 해당 클래스의 멤버변수들을 JPA 감지 대상으로 지정
        - @Getter 주입
        <BaseTime 엔티티의 멤버변수>
        - @CreateDate : Insert 시 자동으로 레코드 생성 날짜 기록
          private LocalDateTime 변수명;
        - @LastModifiedDate : Update 시 레코드 수정 날짜 기록
          private LocalDateTime 변수명;
    3) 실직적으로 사용할 엔티티 클래스에서 extends BaseTime 으로 상속받기


[JPA Entity 와 DTO/VO 변환]
<일반적인 흐름>
 *View(화면템플릿)* <-HTTP(JSON <-> DTO)-> *Controller* <-JPA(DTO <-> Entity)-> *Service* <-Entity-> Repository <-> DB
    1) React
    2) 타임리프       <=@RequestBody=>                         <=toDto=>
    3) Flutter      <=@ResponseBOdy=>                       <=toEntity=>
    4) JPS
    5) 머스테치

[JPA 영속성(Persistence)]
- 정의 : 자바객체를 데이터베이스와 연관지어 생명주기를 관리하며 동기화하는 기능
- 영속성 컨텍스트 : 연속된 객체들을 관리하는 메모리 공간
- 영속성 매니저 : 영속된 객체들을 저장 / 조회 / 수정 / 삭제 가능
    <주요 메소드>
    1) .persist(객체) : 해당 객체에 영속성 부여
    2) .detach(객체)  : 해당 객체에 영속성 해제
    3) .remove(객체)  : 해당 객체에 영속성 삭제
    4) .merage(객체)  : 해당 객체의 영속성 다시 부여

★ 목적 : 객체정보를 저장/기록 하여 한번 기록한 정보에 변화가 없을 경우 DB 에게 다시 요청하지 않고 컨텍스트에서 가져와 재사용 가능 ★
-> DB 접근 효율성이 좋음
