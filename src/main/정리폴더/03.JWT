[인증방식]
방법_1. 세션(HTTP Session) 방식
    -> 톰캣(웹서버)에 저장됨 => 웹서버가 관리
    -> 웹서버의 메모리 부하 발생 가능성 존재
    -> 보안에 유리
    -> 만료여부 : 서버에서 관리
    -> 작은 규모의 개발에서 주로 사용

방법_2. 토큰(JWT) 방식
    -> 클라이언트에 저장됨 => 클라이언트가 관리
    -> 토큰 유출 시 안정성 보장 문제 발생 가능성 존재
    -> 보안에 취약
    -> 만료여부 : 클라이언트에서 관리
    -> 큰 큐모의 개발에서 주로 사용

[JWT : Json Web Token]
- 정의 : JSON 형식의 데이터를 안전하게 사용하기 위한 토큰 기반의 인증 방식
- 목적 : 주로 웹/앱에서 인증과 권한 부여/확인 시 사용
- 장점
    1) 무상태 : 서버가 직접 고나리하지 않기 때문에 클라이언트에서 확장성이 좋음
    2) 보안 : 인증된 토큰의 무결성을 보장하고 중간공격(해킹) 방지
    3) HTTP 지원 : HTTP Header 정보에 토큰의 정보를 담을 수 있음 -> 통신 가능
        -> 토큰 사용 시 HTTPS 권장
        ※ HTTP : 문자 이동 프로토콜(규약) ※
        ※ HTTPS : SSL / TLS 프로토콜 기반 암호화된 HTTP ※
- 구조
    1. 헤더 : JWT 타입 / 알고리즘 정보
    2. 페이로드 : 실제 정보(== 값) / 발급 시간
    3. 서명 : 헤더와 페이로드를 서명하는 알고리즘(비밀키를 이용)
        -> 비밀키 : 개발자가 임의의 값으로 비밀키 정의 => 비밀키 관리 필요

- JWT 사용방법
    1) build.gradle 에 JWT 라이브러리 설치
        implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    2) 토큰 생성/검증 클래스 생성

[암호화 용어정리]
1. Base64 : 이진 데이터를 텍스트 문자열로 인코딩(변화)해주는 방식
    -> 목적 : 이미지 / 파일 / 암호화된 정보 를 아스키코드(문자열) 형식으로 변환하기 위해
    -> 필요한 이유
        1) 특정 프로토콜의 제약조건에 맞추기 위해
        2) 보안 / 암호화
    -> 예시
        01101001 (이진 데이터) -Base64알고리즘을 토한 인코딩-> a54YQ (문자 데이터)

2. HS256 알고리즘 : 대칭 키 암호화 방식 -> SHA-256 기반 해시 알고리즘 사용
    -> 목적 : 비밀키를 이용하여 데이터를 해싱(암호화)하고 그 결과를 서명응로 사용하여 무결성 검증
    -> 256(비트) (== 32바이트)의 해시결과 생성
    -> 사용처 : 관례적으로 Token 에서 서명시 사용
    -> 비클립트와 다르게 복호화 가능

3. HS512 알고리즘 : 512(비트) (== 64바이트) 의 해시 결과 생성
    -> HS256 알고리즘보다 복잡하고 긴 결과 생성가능
    -> HS256 보다 높은 보안성 / 낮은 속도를 가짐
    -> 비클립트와 다르게 복호화 가능

4. 해시알고리즘 : 입력값(데이터)를 고정된 크기의 출력값(해시)로 변환하는 알고리즘
    -> 예시
        사과(입력값) -해시알고리즘-> abc123(출력값(해시))



















